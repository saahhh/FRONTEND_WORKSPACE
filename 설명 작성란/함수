함수
    코드를 재사용가능한 블록을 생성하는데 사용하거나 구조를 관리하기 쉽게 묶음
    
코드 : 
    function 함수이름(매개변수) {
        실행될 문장
    }
    function greet(name) {
        console.log(`안녕, ${name}!`);
    }
작성해준 함수는 호출해서 사용(function Call)
    함수명(파라미터 안에 들어갈 값 작성);
    greet("kh 학생");

반환값(Return) : 어떤 계산이나 결과에 대한 값을 반환
    undefined : 반환값이 없을 때는 undefined이 반환된다.
    
    function 함수명(매개변수) {
        return 반환될 값;
    }
    
    function add(a, b){
        return a + b;
    }
    const result = add(5,3); //결과로 8의 값이 저장된다.

1. 
(매개변수) => 표현할 식
() => 표현식
매개변수가 하나인 경우네는 ()괄호 생략이 가능하다.

2.
(매개변수) => {
    //여러 표현식이 존재할 경우 {}중괄호를 써서 묶어준다.
}
표현식이 여러개 일 경우 {}를 사용해서 여러표현식을 묶어줘야한다.

=> : 
1. 화살표(=>)를 사용하지 않는 경우
    function add(a, b) {
        return a + b;
    }
2. 화살표(=>)를 사용해서 나타낼 때 (한줄로 표현이 가능하다)
    const add = (a, b) => a + b;
3. 매개변수가 하나일 경우 (괄호 생략 가능)
    const one = a => a * a;

  ('click', () => {
    buttonA.setAttribute('disabled', true);
    buttonB.removeAttribute('disabled',);
  }); //매개변수는 없지만 결과는 나타내고싶을 때


JAVA - 컴파일언어
컴퓨터로 사용자가 작성한 내용을 번역, 컴퓨터가 읽을수있게 변환
JS - 인터프리터언어 
변환할필요x

java가 js보다 속도가 빠름